package testcases;

import factoryRequest.FactoryRequest;
import factoryRequest.RequestInformation;
import factoryRequest.ResponseInformation;

import io.qameta.allure.*;
import org.json.JSONObject;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import utils.ConfigOwaspApi;

public class VulnerabilityTest {

    private String idScanner;
    private String url="https://todoist.com/";

    @DisplayName("Verificar la ejecucion de el OWASP")
    @Description("Este test cases es para verifcar la pagina todoist.com")
    @Link("jira.com/todoist")
    @Issue("Bug000061")
    @Severity(SeverityLevel.CRITICAL)

    @Test
    public void startVulnerabilityScanner(){
        this.startScanner();
        this.monitoring();
    }

    @AfterEach
    public void after(){
        // #3 si es 100% generar reporte
        RequestInformation information = new RequestInformation();
        information.setUrl(ConfigOwaspApi.GET_REPORT);
        ResponseInformation responseInformation=FactoryRequest.make("get").send(information);
        this.attachmentFile("OWASP ZAP REPORT",responseInformation.getBody());
        // #4 adicionar el reporte de tipos de vulnerabilidades+#alertas
        information.setUrl(ConfigOwaspApi.GET_ATTACK+idScanner);
        responseInformation=FactoryRequest.make("get").send(information);
        this.attachmentFile("Lista De Vulnerabilidades",responseInformation.getBody());
    }

    @Attachment(value="{0}", type="text/html")
    public String attachmentFile(String name,String content){
        return content;
    }


    @Step("Empezando el scaneo de vulnerabilidades con ZAP")
    public void startScanner(){
        // #1 iniciar el scaneo
        RequestInformation information = new RequestInformation();
        information.setUrl(ConfigOwaspApi.START_SCANNER+url);

        ResponseInformation responseInformation=FactoryRequest.make("get").send(information);
        JSONObject body = new JSONObject(responseInformation.getBody());
        idScanner=body.get("scan").toString();
        System.out.println("********** ID "+idScanner);
    }

    @Step("Monitoreando hasta que llegar al 100%")
    public void monitoring(){
        // #2 verificar el estado del scanero
        // si esta en 100% pasar a la generacion de reportes
        String percentage="0";
        RequestInformation information = new RequestInformation();
        information.setUrl(ConfigOwaspApi.GET_PROGRESS+idScanner);
        while(!percentage.equals("100")){
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ResponseInformation responseInformation=FactoryRequest.make("get").send(information);
            JSONObject body = new JSONObject(responseInformation.getBody());
            percentage=body.get("status").toString();
            System.out.println("STATUS ----> "+percentage);
        }

    }

}
